/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BreakpointRepresentation } from '../model/breakpointRepresentation';
import { CollectionBreakpointRepresentation } from '../model/collectionBreakpointRepresentation';
import { DebuggerRestVariable } from '../model/debuggerRestVariable';
import { EventLogEntry } from '../model/eventLogEntry';
import { ExecutionRepresentation } from '../model/executionRepresentation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DebuggerResourceService {

    protected basePath = 'https://localhost:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addBreakPoints
     *
     * @param breakpointRepresentation breakpointRepresentation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addBreakPoints(breakpointRepresentation: BreakpointRepresentation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addBreakPoints(breakpointRepresentation: BreakpointRepresentation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addBreakPoints(breakpointRepresentation: BreakpointRepresentation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addBreakPoints(breakpointRepresentation: BreakpointRepresentation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (breakpointRepresentation === null || breakpointRepresentation === undefined) {
            throw new Error('Required parameter breakpointRepresentation was null or undefined when calling addBreakPoints.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/app/rest/debugger/breakpoints`,
            breakpointRepresentation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * continueExecution
     *
     * @param executionId executionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public continueExecution(executionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public continueExecution(executionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public continueExecution(executionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public continueExecution(executionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling continueExecution.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/app/rest/debugger/breakpoints/${encodeURIComponent(String(executionId))}/continue`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteBreakPoints
     *
     * @param breakpointRepresentation breakpointRepresentation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBreakPoints(breakpointRepresentation: BreakpointRepresentation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBreakPoints(breakpointRepresentation: BreakpointRepresentation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBreakPoints(breakpointRepresentation: BreakpointRepresentation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBreakPoints(breakpointRepresentation: BreakpointRepresentation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (breakpointRepresentation === null || breakpointRepresentation === undefined) {
            throw new Error('Required parameter breakpointRepresentation was null or undefined when calling deleteBreakPoints.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/app/rest/debugger/breakpoints`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * evaluateExpression
     *
     * @param executionId executionId
     * @param expression expression
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public evaluateExpression(executionId: string, expression: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public evaluateExpression(executionId: string, expression: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public evaluateExpression(executionId: string, expression: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public evaluateExpression(executionId: string, expression: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling evaluateExpression.');
        }

        if (expression === null || expression === undefined) {
            throw new Error('Required parameter expression was null or undefined when calling evaluateExpression.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/text'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/app/rest/debugger/evaluate/expression/${encodeURIComponent(String(executionId))}`,
            expression,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * evaluateScript
     *
     * @param executionId executionId
     * @param scriptLanguage scriptLanguage
     * @param script script
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public evaluateScript(executionId: string, scriptLanguage: string, script: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public evaluateScript(executionId: string, scriptLanguage: string, script: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public evaluateScript(executionId: string, scriptLanguage: string, script: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public evaluateScript(executionId: string, scriptLanguage: string, script: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling evaluateScript.');
        }

        if (scriptLanguage === null || scriptLanguage === undefined) {
            throw new Error('Required parameter scriptLanguage was null or undefined when calling evaluateScript.');
        }

        if (script === null || script === undefined) {
            throw new Error('Required parameter script was null or undefined when calling evaluateScript.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/app/rest/debugger/evaluate/${encodeURIComponent(String(scriptLanguage))}/${encodeURIComponent(String(executionId))}`,
            script,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBreakpoints
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBreakpoints(observe?: 'body', reportProgress?: boolean): Observable<CollectionBreakpointRepresentation>;
    public getBreakpoints(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionBreakpointRepresentation>>;
    public getBreakpoints(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionBreakpointRepresentation>>;
    public getBreakpoints(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CollectionBreakpointRepresentation>(`${this.basePath}/app/rest/debugger/breakpoints`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getEventLog
     *
     * @param processInstanceId processInstanceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEventLog(processInstanceId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EventLogEntry>>;
    public getEventLog(processInstanceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EventLogEntry>>>;
    public getEventLog(processInstanceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EventLogEntry>>>;
    public getEventLog(processInstanceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling getEventLog.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EventLogEntry>>(`${this.basePath}/app/rest/debugger/eventlog/${encodeURIComponent(String(processInstanceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getExecutionVariables
     *
     * @param executionId executionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExecutionVariables(executionId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DebuggerRestVariable>>;
    public getExecutionVariables(executionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DebuggerRestVariable>>>;
    public getExecutionVariables(executionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DebuggerRestVariable>>>;
    public getExecutionVariables(executionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling getExecutionVariables.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<DebuggerRestVariable>>(`${this.basePath}/app/rest/debugger/variables/${encodeURIComponent(String(executionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getExecutions
     *
     * @param processInstanceId processInstanceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExecutions(processInstanceId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ExecutionRepresentation>>;
    public getExecutions(processInstanceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExecutionRepresentation>>>;
    public getExecutions(processInstanceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExecutionRepresentation>>>;
    public getExecutions(processInstanceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling getExecutions.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ExecutionRepresentation>>(`${this.basePath}/app/rest/debugger/executions/${encodeURIComponent(String(processInstanceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * isDebuggerAllowed
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isDebuggerAllowed(observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isDebuggerAllowed(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isDebuggerAllowed(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isDebuggerAllowed(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/app/rest/debugger`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
