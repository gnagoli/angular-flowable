/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateUserRepresentation } from '../model/createUserRepresentation';
import { ResultListDataRepresentation } from '../model/resultListDataRepresentation';
import { UpdateUsersRepresentation } from '../model/updateUsersRepresentation';
import { UserRepresentation } from '../model/userRepresentation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class IdmUsersResourceService {

    protected basePath = 'https://localhost:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * bulkUpdateUserDetails
     *
     * @param updateUsersRepresentation updateUsersRepresentation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bulkUpdateUserDetails(updateUsersRepresentation: UpdateUsersRepresentation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public bulkUpdateUserDetails(updateUsersRepresentation: UpdateUsersRepresentation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public bulkUpdateUserDetails(updateUsersRepresentation: UpdateUsersRepresentation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public bulkUpdateUserDetails(updateUsersRepresentation: UpdateUsersRepresentation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (updateUsersRepresentation === null || updateUsersRepresentation === undefined) {
            throw new Error('Required parameter updateUsersRepresentation was null or undefined when calling bulkUpdateUserDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/rest/admin/users`,
            updateUsersRepresentation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createNewUser
     *
     * @param userRepresentation userRepresentation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createNewUser(userRepresentation: CreateUserRepresentation, observe?: 'body', reportProgress?: boolean): Observable<UserRepresentation>;
    public createNewUser(userRepresentation: CreateUserRepresentation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserRepresentation>>;
    public createNewUser(userRepresentation: CreateUserRepresentation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserRepresentation>>;
    public createNewUser(userRepresentation: CreateUserRepresentation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userRepresentation === null || userRepresentation === undefined) {
            throw new Error('Required parameter userRepresentation was null or undefined when calling createNewUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserRepresentation>(`${this.basePath}/rest/admin/users`,
            userRepresentation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteUser
     *
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUser(userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUser(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUser(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUser(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/rest/admin/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getUsers
     *
     * @param filter filter
     * @param sort sort
     * @param start start
     * @param groupId groupId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(filter?: string, sort?: string, start?: number, groupId?: string, observe?: 'body', reportProgress?: boolean): Observable<ResultListDataRepresentation>;
    public getUsers(filter?: string, sort?: string, start?: number, groupId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResultListDataRepresentation>>;
    public getUsers(filter?: string, sort?: string, start?: number, groupId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResultListDataRepresentation>>;
    public getUsers(filter?: string, sort?: string, start?: number, groupId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ResultListDataRepresentation>(`${this.basePath}/rest/admin/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateUserDetails
     *
     * @param userId userId
     * @param updateUsersRepresentation updateUsersRepresentation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserDetails(userId: string, updateUsersRepresentation: UpdateUsersRepresentation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUserDetails(userId: string, updateUsersRepresentation: UpdateUsersRepresentation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUserDetails(userId: string, updateUsersRepresentation: UpdateUsersRepresentation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUserDetails(userId: string, updateUsersRepresentation: UpdateUsersRepresentation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUserDetails.');
        }

        if (updateUsersRepresentation === null || updateUsersRepresentation === undefined) {
            throw new Error('Required parameter updateUsersRepresentation was null or undefined when calling updateUserDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/rest/admin/users/${encodeURIComponent(String(userId))}`,
            updateUsersRepresentation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
