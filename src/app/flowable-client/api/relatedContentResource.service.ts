/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ContentItemRepresentation } from '../model/contentItemRepresentation';
import { ResultListDataRepresentation } from '../model/resultListDataRepresentation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RelatedContentResourceService {

    protected basePath = 'https://localhost:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createContentItemOnCaseText
     *
     * @param caseId caseId
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createContentItemOnCaseText(caseId: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createContentItemOnCaseText(caseId: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createContentItemOnCaseText(caseId: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createContentItemOnCaseText(caseId: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling createContentItemOnCaseText.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling createContentItemOnCaseText.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/app/rest/case-instances/${encodeURIComponent(String(caseId))}/raw-content/text`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createContentItemOnCase
     *
     * @param caseId caseId
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createContentItemOnCase(caseId: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<ContentItemRepresentation>;
    public createContentItemOnCase(caseId: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContentItemRepresentation>>;
    public createContentItemOnCase(caseId: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContentItemRepresentation>>;
    public createContentItemOnCase(caseId: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling createContentItemOnCase.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling createContentItemOnCase.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<ContentItemRepresentation>(`${this.basePath}/app/rest/case-instances/${encodeURIComponent(String(caseId))}/raw-content`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createContentItemOnProcessInstanceText
     *
     * @param processInstanceId processInstanceId
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createContentItemOnProcessInstanceText(processInstanceId: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createContentItemOnProcessInstanceText(processInstanceId: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createContentItemOnProcessInstanceText(processInstanceId: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createContentItemOnProcessInstanceText(processInstanceId: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling createContentItemOnProcessInstanceText.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling createContentItemOnProcessInstanceText.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/app/rest/process-instances/${encodeURIComponent(String(processInstanceId))}/raw-content/text`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * uploadContentItemOnProcessInstance
     *
     * @param processInstanceId processInstanceId
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadContentItemOnProcessInstance(processInstanceId: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<ContentItemRepresentation>;
    public uploadContentItemOnProcessInstance(processInstanceId: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContentItemRepresentation>>;
    public uploadContentItemOnProcessInstance(processInstanceId: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContentItemRepresentation>>;
    public uploadContentItemOnProcessInstance(processInstanceId: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling uploadContentItemOnProcessInstance.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadContentItemOnProcessInstance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<ContentItemRepresentation>(`${this.basePath}/app/rest/process-instances/${encodeURIComponent(String(processInstanceId))}/raw-content`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createContentItemOnProcessInstance
     *
     * @param processInstanceId processInstanceId
     * @param contentItem contentItem
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createContentItemOnProcessInstance(processInstanceId: string, contentItem: ContentItemRepresentation, observe?: 'body', reportProgress?: boolean): Observable<ContentItemRepresentation>;
    public createContentItemOnProcessInstance(processInstanceId: string, contentItem: ContentItemRepresentation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContentItemRepresentation>>;
    public createContentItemOnProcessInstance(processInstanceId: string, contentItem: ContentItemRepresentation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContentItemRepresentation>>;
    public createContentItemOnProcessInstance(processInstanceId: string, contentItem: ContentItemRepresentation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling createContentItemOnProcessInstance.');
        }

        if (contentItem === null || contentItem === undefined) {
            throw new Error('Required parameter contentItem was null or undefined when calling createContentItemOnProcessInstance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ContentItemRepresentation>(`${this.basePath}/app/rest/processes/${encodeURIComponent(String(processInstanceId))}/content`,
            contentItem,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createContentItemOnTaskText
     *
     * @param taskId taskId
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createContentItemOnTaskText(taskId: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createContentItemOnTaskText(taskId: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createContentItemOnTaskText(taskId: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createContentItemOnTaskText(taskId: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling createContentItemOnTaskText.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling createContentItemOnTaskText.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/app/rest/tasks/${encodeURIComponent(String(taskId))}/raw-content/text`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createContentItemOnTask
     *
     * @param taskId taskId
     * @param contentItem contentItem
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createContentItemOnTask(taskId: string, contentItem: ContentItemRepresentation, observe?: 'body', reportProgress?: boolean): Observable<ContentItemRepresentation>;
    public createContentItemOnTask(taskId: string, contentItem: ContentItemRepresentation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContentItemRepresentation>>;
    public createContentItemOnTask(taskId: string, contentItem: ContentItemRepresentation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContentItemRepresentation>>;
    public createContentItemOnTask(taskId: string, contentItem: ContentItemRepresentation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling createContentItemOnTask.');
        }

        if (contentItem === null || contentItem === undefined) {
            throw new Error('Required parameter contentItem was null or undefined when calling createContentItemOnTask.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ContentItemRepresentation>(`${this.basePath}/app/rest/tasks/${encodeURIComponent(String(taskId))}/content`,
            contentItem,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * uploadContentItemOnTask
     *
     * @param taskId taskId
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadContentItemOnTask(taskId: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<ContentItemRepresentation>;
    public uploadContentItemOnTask(taskId: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContentItemRepresentation>>;
    public uploadContentItemOnTask(taskId: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContentItemRepresentation>>;
    public uploadContentItemOnTask(taskId: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling uploadContentItemOnTask.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadContentItemOnTask.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<ContentItemRepresentation>(`${this.basePath}/app/rest/tasks/${encodeURIComponent(String(taskId))}/raw-content`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createTemporaryRawContentItemText
     *
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTemporaryRawContentItemText(file: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createTemporaryRawContentItemText(file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createTemporaryRawContentItemText(file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createTemporaryRawContentItemText(file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling createTemporaryRawContentItemText.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/app/rest/content/raw/text`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createTemporaryRawContentItem
     *
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTemporaryRawContentItem(file: Blob, observe?: 'body', reportProgress?: boolean): Observable<ContentItemRepresentation>;
    public createTemporaryRawContentItem(file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContentItemRepresentation>>;
    public createTemporaryRawContentItem(file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContentItemRepresentation>>;
    public createTemporaryRawContentItem(file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling createTemporaryRawContentItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<ContentItemRepresentation>(`${this.basePath}/app/rest/content/raw`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createTemporaryRelatedContent
     *
     * @param contentItem contentItem
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTemporaryRelatedContent(contentItem: ContentItemRepresentation, observe?: 'body', reportProgress?: boolean): Observable<ContentItemRepresentation>;
    public createTemporaryRelatedContent(contentItem: ContentItemRepresentation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContentItemRepresentation>>;
    public createTemporaryRelatedContent(contentItem: ContentItemRepresentation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContentItemRepresentation>>;
    public createTemporaryRelatedContent(contentItem: ContentItemRepresentation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contentItem === null || contentItem === undefined) {
            throw new Error('Required parameter contentItem was null or undefined when calling createTemporaryRelatedContent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ContentItemRepresentation>(`${this.basePath}/app/rest/content`,
            contentItem,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteContent
     *
     * @param contentId contentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteContent(contentId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteContent(contentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteContent(contentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteContent(contentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling deleteContent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/app/rest/content/${encodeURIComponent(String(contentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getContentItemsForCase
     *
     * @param caseInstanceId caseInstanceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContentItemsForCase(caseInstanceId: string, observe?: 'body', reportProgress?: boolean): Observable<ResultListDataRepresentation>;
    public getContentItemsForCase(caseInstanceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResultListDataRepresentation>>;
    public getContentItemsForCase(caseInstanceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResultListDataRepresentation>>;
    public getContentItemsForCase(caseInstanceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseInstanceId === null || caseInstanceId === undefined) {
            throw new Error('Required parameter caseInstanceId was null or undefined when calling getContentItemsForCase.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ResultListDataRepresentation>(`${this.basePath}/app/rest/case-instances/${encodeURIComponent(String(caseInstanceId))}/content`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getContentItemsForProcessInstance
     *
     * @param processInstanceId processInstanceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContentItemsForProcessInstance(processInstanceId: string, observe?: 'body', reportProgress?: boolean): Observable<ResultListDataRepresentation>;
    public getContentItemsForProcessInstance(processInstanceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResultListDataRepresentation>>;
    public getContentItemsForProcessInstance(processInstanceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResultListDataRepresentation>>;
    public getContentItemsForProcessInstance(processInstanceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling getContentItemsForProcessInstance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ResultListDataRepresentation>(`${this.basePath}/app/rest/process-instances/${encodeURIComponent(String(processInstanceId))}/content`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getContentItemsForTask
     *
     * @param taskId taskId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContentItemsForTask(taskId: string, observe?: 'body', reportProgress?: boolean): Observable<ResultListDataRepresentation>;
    public getContentItemsForTask(taskId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResultListDataRepresentation>>;
    public getContentItemsForTask(taskId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResultListDataRepresentation>>;
    public getContentItemsForTask(taskId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling getContentItemsForTask.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ResultListDataRepresentation>(`${this.basePath}/app/rest/tasks/${encodeURIComponent(String(taskId))}/content`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getContent
     *
     * @param contentId contentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContent(contentId: string, observe?: 'body', reportProgress?: boolean): Observable<ContentItemRepresentation>;
    public getContent(contentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContentItemRepresentation>>;
    public getContent(contentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContentItemRepresentation>>;
    public getContent(contentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getContent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ContentItemRepresentation>(`${this.basePath}/app/rest/content/${encodeURIComponent(String(contentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getRawContent
     *
     * @param contentId contentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRawContent(contentId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRawContent(contentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRawContent(contentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRawContent(contentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getRawContent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/app/rest/content/${encodeURIComponent(String(contentId))}/raw`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
